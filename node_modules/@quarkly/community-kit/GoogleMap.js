"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Wrapper = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    width: 100%;\n    height: 100%;\n    position: relative;\n"])));

var GoogleMap = function GoogleMap(_ref) {
  var _ref$query = _ref.query,
      query = _ref$query === void 0 ? 'New York' : _ref$query,
      apiKey = _ref.apiKey,
      props = _objectWithoutProperties(_ref, ["query", "apiKey"]);

  return /*#__PURE__*/_react["default"].createElement(Wrapper, props, apiKey ? /*#__PURE__*/_react["default"].createElement("iframe", {
    title: "community-kit-google-map-".concat(query),
    style: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      top: 0,
      left: 0
    },
    frameBorder: "0",
    allowFullScreen: true,
    src: "https://www.google.com/maps/embed/v1/place?key=".concat(apiKey, "&q=").concat(query)
  }) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add API key in Props panel"
  }));
};

var propInfo = {
  apiKey: {
    title: {
      en: 'API key',
      ru: 'API Ключ'
    },
    description: {
      en: "You can get the 'API key' from the link in the component description",
      ru: 'Получить "API Ключ" можно по ссылке в описании компонента'
    },
    control: 'input',
    type: 'text',
    category: 'Main',
    weight: 1
  },
  query: {
    title: {
      en: 'Select place',
      ru: 'Место для выделения'
    },
    description: {
      en: 'Name of place, address or latitude and longitude coordinates, separated by commas',
      ru: 'Название места, адрес или координаты широты и долготы через запятую'
    },
    control: 'input',
    type: 'text',
    category: 'Main'
  }
};
var defaultProps = {};
Object.assign(GoogleMap, {
  title: 'Google Map',
  description: {
    en: "Use this component to add maps from 'Google Maps'",
    ru: 'Компонент для добавления карты сервиса "Google Maps"'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = GoogleMap;
exports["default"] = _default;